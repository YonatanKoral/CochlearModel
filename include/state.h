/******************************************************************\

	File Name :		state.h
	===========

	Classes Defined :	CState, CSolutionMat
	=================

	Description	:	
	=============
		Define a state vector and all the functions to handle its parameters. 


\******************************************************************/
#pragma once

#ifndef __MY_STATE
#define __MY_STATE

#include "mutual.h"
#include "cvector.h"
#include "error.h"
#include "bin.h"
#include "TBin.h"
#include "tridiag.h"
#include "model.h"
#include "ode.h"

class CState : public ode
{
public:

	double			_time;				// Current state's time.
	double			_time_step;
	//const double	_min_time_step;		// Minimum time step size
	//const double	_max_time_step;		// Maximum time step size

	long const		_Fs;				// [Hz] Sampling rate
	double const	_Ts;				// [Hz] Time rate (inverse Sampling rate).


	long const _buffer_start_position; // input buffer start position of read from file
	
	CTriDiag *const	_TriMat;			// Tridiagobal matrix.
	//CBin *const		_expected_file;	// Access to the expected file (input excitation).
	vector<double> const * const _input_buffer;
	vector<double> _input_sample;

	// BM
	vector<double>	_BM_disp;			// BM displacement
	vector<double>	_BM_sp;				// BM speed
	vector<double>	_BM_acc;			// BM acceleration

	// OW
	double	_OW_disp;			// OW membrane displacement
	double	_OW_sp;				// OW membrane speed
	double	_OW_acc;			// OW membrane acceleration

	double _bc;					// (OW) boundary condition (at x=0).
    double max_samp;
	vector<double>	_pressure;			// net pressure on membrane 

	// OHC
	vector<double>	_p_ohc;				// OHC pressure
	vector<double>	_d_p_ohc;			// derivative of OHC pressure
	vector<double>	_psi_ohc;			// [V] basolateral potential difference
	vector<double>	_d_psi_ohc;			// [V] derivative of the basolateral potential difference
	vector<double> _deltaL_disp;		// [m] length change as a function of OHC potential (psi)
	vector<double> _p_TM;				// [Pa] the pressure generated by the TM
	
	// TM
	vector<double>	_TM_disp;			// TM displacement
	vector<double>	_TM_sp;				// TM speed

	// Cochlea
	vector<double> _G; 				// G(x,t) from the pressure equation @^2P(x,t)/@t^2 - Q(x)*P(x,t) = G(x,t)
	vector<double> _Y; 				// Y(x,t) from U*P = Y

	int _params_set_counter;
	CModel	*_model;

	// Functions:
	// ----------
	CState( 
		double		time,
		double		time_step,
		//double min_time_step,
		//double max_time_step,
		long const	Fs,				// [Hz] Sampling rate
		CTriDiag&	TriMat,
		vector<double>*		input_buffer,
		long buffer_start_position,
		//CBin*		expected_file,
		CModel&		_model,
		int param_set_counter
	);
	~CState();

	/// calc OHC pressure (Pohc)
	//vector<double> Calc_Pohc();

	// Calc G(x,t) from the pressure equation @^2P(x,t)/@t^2 - Q(x)*P(x,t) = G(x,t), (without the boundary conditions)
	//vector<double> Calc_G();

	// Calc Y(x,t) from U*P = Y
	//vector<double> Calc_Y();

	// Calc the Oval Window boundary condition at x = 0 (P(x,t))
	//double Calc_BC();

	// Calc BM acceleration
	//vector<double> Calc_BM_Acceleration();

	// Calc OW acceleration
	//double Calc_OW_Acceleration();

	// Clac the psi's derivative
	//<double> Calc_OHC_Psi_Deriv();

	// Clac non-linear R_bm_nl(x) = R(x)*( 1 + alpha_r*BM_speed ) 
	//vector<double> R_bm_nl();

	// Calc the OAE Pe(t) at the stapes:
	//double Calc_OAE();

	// (OHC speed) = (TM speed) - (BM speed)
	//vector<double> OHC_Speed();

	// (OHC displacement) = (TM displacement) - (BM displacement)
	//vector<double> OHC_Displacement();

	// OHC electromotility alongation:
	//vector<double> Calc_DeltaL_OHC();

	// TM speed:
	//vector<double> Calc_TM_speed();

	// TM pressure:
	//vector<double> Calc_Ptm();

	// Implement one step for the current state ( 1 time step )
	//void One_Time_Step( const CState past, const ODE_TYPE ode_type );

	// copy state (relevant parameters only)
	CState* copy_state( const CState *const obj2copy );

	// Update state's time & time step
	CState* restart_state( const double _current_time, const double _time_step );
	
	// Get input's sample at time t (pin(t))
	double get_sample( void );
	double gen_new_sample( void);
	void gen_input_data(std::vector<float>& inp_array, double start_time, int size, double freq, double amp);
	void load_input_data(std::vector<float>& inp_array, double start_time, int size, double amp);

	// Read the current sample from the input file:
	//double read_sample_from_file( void );


};

#endif


